name: GoSellr CI/CD Pipeline

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main ]
  release:
    types: [ published ]

env:
  REGISTRY: ghcr.io
  IMAGE_NAME: ${{ github.repository }}

jobs:
  # Test and Build
  test-and-build:
    runs-on: ubuntu-latest
    strategy:
      matrix:
        node-version: [18.x, 20.x]

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Setup Node.js ${{ matrix.node-version }}
      uses: actions/setup-node@v4
      with:
        node-version: ${{ matrix.node-version }}
        cache: 'npm'
        cache-dependency-path: |
          services/EHB-GOSELLER/backend/package-lock.json
          services/EHB-GOSELLER/frontend/package-lock.json

    - name: Install Backend Dependencies
      working-directory: services/EHB-GOSELLER/backend
      run: npm ci

    - name: Install Frontend Dependencies
      working-directory: services/EHB-GOSELLER/frontend
      run: npm ci

    - name: Run Backend Tests
      working-directory: services/EHB-GOSELLER/backend
      run: npm test
      env:
        NODE_ENV: test
        MONGODB_URI: mongodb://localhost:27017/gosellr-test
        JWT_SECRET: test-secret
        OPENAI_API_KEY: test-key

    - name: Run Frontend Tests
      working-directory: services/EHB-GOSELLER/frontend
      run: npm test -- --coverage --watchAll=false

    - name: Build Frontend
      working-directory: services/EHB-GOSELLER/frontend
      run: npm run build

    - name: Run Security Scan
      uses: snyk/actions/node@master
      env:
        SNYK_TOKEN: ${{ secrets.SNYK_TOKEN }}
      with:
        args: --severity-threshold=high
        working-directory: services/EHB-GOSELLER/backend

  # Docker Build and Push
  docker-build:
    needs: test-and-build
    runs-on: ubuntu-latest
    if: github.event_name == 'push' || github.event_name == 'release'

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v3

    - name: Log in to Container Registry
      uses: docker/login-action@v3
      with:
        registry: ${{ env.REGISTRY }}
        username: ${{ github.actor }}
        password: ${{ secrets.GITHUB_TOKEN }}

    - name: Extract metadata
      id: meta
      uses: docker/metadata-action@v5
      with:
        images: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}
        tags: |
          type=ref,event=branch
          type=ref,event=pr
          type=semver,pattern={{version}}
          type=semver,pattern={{major}}.{{minor}}
          type=sha

    - name: Build and push Backend image
      uses: docker/build-push-action@v5
      with:
        context: services/EHB-GOSELLER/backend
        push: true
        tags: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}/backend:${{ steps.meta.outputs.version }}
        labels: ${{ steps.meta.outputs.labels }}
        cache-from: type=gha
        cache-to: type=gha,mode=max

    - name: Build and push Frontend image
      uses: docker/build-push-action@v5
      with:
        context: services/EHB-GOSELLER/frontend
        push: true
        tags: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}/frontend:${{ steps.meta.outputs.version }}
        labels: ${{ steps.meta.outputs.labels }}
        cache-from: type=gha
        cache-to: type=gha,mode=max

  # Deploy to Staging
  deploy-staging:
    needs: docker-build
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/develop'
    environment: staging

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Setup SSH
      uses: webfactory/ssh-agent@v0.8.0
      with:
        ssh-private-key: ${{ secrets.STAGING_SSH_KEY }}

    - name: Deploy to Staging
      run: |
        ssh -o StrictHostKeyChecking=no ${{ secrets.STAGING_USER }}@${{ secrets.STAGING_HOST }} << 'EOF'
          cd /opt/gosellr
          git pull origin develop
          docker-compose pull
          docker-compose up -d
          docker system prune -f
        EOF

  # Deploy to Production
  deploy-production:
    needs: docker-build
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/main' || github.event_name == 'release'
    environment: production

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Setup SSH
      uses: webfactory/ssh-agent@v0.8.0
      with:
        ssh-private-key: ${{ secrets.PRODUCTION_SSH_KEY }}

    - name: Deploy to Production
      run: |
        ssh -o StrictHostKeyChecking=no ${{ secrets.PRODUCTION_USER }}@${{ secrets.PRODUCTION_HOST }} << 'EOF'
          cd /opt/gosellr
          git pull origin main
          docker-compose pull
          docker-compose up -d
          docker system prune -f
        EOF

    - name: Run Health Checks
      run: |
        sleep 30
        curl -f https://${{ secrets.PRODUCTION_DOMAIN }}/health || exit 1
        curl -f https://${{ secrets.PRODUCTION_DOMAIN }}/api/health || exit 1

  # Performance Testing
  performance-test:
    needs: deploy-production
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/main'

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '18.x'

    - name: Install Artillery
      run: npm install -g artillery

    - name: Run Performance Tests
      run: |
        artillery run services/EHB-GOSELLER/tests/performance/load-test.yml
      env:
        TARGET_URL: https://${{ secrets.PRODUCTION_DOMAIN }}

  # Security Testing
  security-test:
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/main'

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Run OWASP ZAP Scan
      uses: zaproxy/action-full-scan@v0.8.0
      with:
        target: 'https://${{ secrets.PRODUCTION_DOMAIN }}'
        rules_file_name: '.zap/rules.tsv'
        cmd_options: '-a'

  # Notifications
  notify:
    needs: [deploy-production, performance-test, security-test]
    runs-on: ubuntu-latest
    if: always()

    steps:
    - name: Notify Slack
      uses: 8398a7/action-slack@v3
      with:
        status: ${{ job.status }}
        channel: '#gosellr-deployments'
        webhook_url: ${{ secrets.SLACK_WEBHOOK }}
      env:
        SLACK_WEBHOOK_URL: ${{ secrets.SLACK_WEBHOOK }}

    - name: Notify Email
      if: github.ref == 'refs/heads/main'
      run: |
        echo "Deployment completed for ${{ github.repository }}"
        # Add email notification logic here
